% ѕузырькова€ сортировка
% »де€ этого метода заключаетс€ в следующем.
% Ќа каждом шаге сравниваютс€ два соседних элемента списка.
% ≈сли оказываетс€, что они сто€т неправильно, то есть предыдущий элемент меньше следующего,
% то они мен€ютс€ местами. Ётот процесс продолжаем до тех пор,
% пока есть пары соседних элементов, расположенные в неправильном пор€дке.
% Ёто и будет означать, что список отсортирован.

% ¬ этой лабе под пузырьком € подразумеваю элемент, который должен изменить свое положение

% ѕредикат оболочка дл€ пузырьковой сортировки
bubblesort(List):-
  sorting(List, Result),
  write(Result).

% ѕредикат сортировки
% ≈сли после попытки подн€ть один пузырек наверх ничего не изменилось - массив уже отсортирован
sorting(List, List):-
  bubbleup(List, List).
% ≈сли после поднимани€ пузырька массив изменилс€ (т.е. какой-то пузырек подн€лс€ максимально возможно,
% а, значит, отсортированный фрагмент концовки удлинилс€ на 1), то снова пытаемс€ отсортировать массив
sorting(List, Result):-
  bubbleup(List, Result1),
  not(List = Result1),
  sorting(Result1, Result).

% ѕредикат поднимани€ одного пузырька максимально возможно вверх
% ≈сли длина меньше 2, то пузырек уже точно не может подн€тьс€
bubbleup(List,List):-
  length(List, Length),
  Length < 2.
% ≈сли первый элемент больше второго, то он пузырек.
% –езультатом будет склейка второго элемента и рекурсивного подн€ти€ пузырька в хвосте
bubbleup([H1,H2|T], Result):-
  H1 > H2,
  bubbleup([H1|T], Result1),
  append([H2], Result1, Result).
% ≈сли первый элемент меньше или равен второго, то он не пузырек. ѕродолжаем попытку поднимани€ пузырька в хвосте.
bubbleup([H1,H2|T], Result):-
  H1 =< H2,
  bubbleup([H2|T], Result1),
  append([H1], Result1, Result).
